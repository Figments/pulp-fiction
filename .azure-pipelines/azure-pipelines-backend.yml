trigger:
  branches:
    include:
      - master
  paths:
    exclude: 
      - '/frontend'
      - /.azure-pipelines/azure-pipelines-frontend.yml

pool:
  vmImage: 'ubuntu-latest'

steps: 
  - task: NodeTool@0
    inputs:
      versionSpec: '14.6.0'
    displayName: 'Install Node.js 14.6.0'

  # Add NPM/Yarn global tools
  - script: |      
      yarn global add @nestjs/cli@7.4.1
      yarn global add typescript@3.9.7
      yarn global add neon-cli@0.4.0
    displayName: 'Install global tools'

    # Create .env file. TODO: Pull from secret variables.
  - script: |
      printf "%s\n" "DATABASE_URL=mongodb://localhost:27017/my_database" "JWT_SECRET=whatever" > .env
    displayName: 'Create .env file'

  - task: Cache@2
    inputs:
    # Note that the cache key is the hash of of yarn.lock. If the lockfile changes, the cache gets invalidated.
      key: 'yarn | "$(Agent.OS)" | $(Build.SourcesDirectory)/yarn.lock'
      path: '$(Build.SourcesDirectory)/node_modules'
      cacheHitVar: 'CacheRestored'
    displayName: "Cache node_modules"

    # Install production-only packages if the cache doesn't exist, or is out of date.
  - script: yarn install --production=true
    displayName: "Yarn install"
    #condition: ne(variables['CacheRestored'], 'true')

    # Build the project
  - script: yarn build
    displayName: "Build"

  # Publish the built /dist folder to make it available for release
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/dist'
      ArtifactName: 'backend-dist'
      publishLocation: 'Container'

    # Publish the built /node_modules folder to make it available for release
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/node_modules'
      ArtifactName: 'backend-node_modules'
      publishLocation: 'Container'
    

