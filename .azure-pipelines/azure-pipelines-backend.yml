trigger:
  branches:
    include:
      - master
  paths:
    exclude: 
      - /.azure-pipelines/azure-pipelines-frontend.yml
      - /packages/client/*
      - /packages/client-e2e/*

pool:
  vmImage: 'ubuntu-latest'

steps: 
  - task: NodeTool@0
    inputs:
      versionSpec: '14.6.0'
    displayName: 'Install Node.js 14.6.0'

  - task: Cache@2
    inputs:
    # Note that the cache key is the hash of of yarn.lock. If the lockfile changes, the cache gets invalidated.
      key: 'yarn | "$(Agent.OS)" | $(Build.SourcesDirectory)/yarn.lock'
      path: '$(Build.SourcesDirectory)/node_modules'
      cacheHitVar: 'CacheRestored'
    displayName: "Cache node_modules"

    # Install production-only packages if the cache doesn't exist, or is out of date.
  - script: yarn install --non-interactive --frozen-lockfile
    displayName: "Yarn install"
    condition: ne(variables['CacheRestored'], 'true')

  # Build the project
  - script: yarn build server --prod
    displayName: "Build"

  # Publish the built /dist/packages/server folder to make it available for release
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/dist/packages/server'
      ArtifactName: 'backend-dist'
      publishLocation: 'Container'
    displayName: "Publish /dist/packages/server folder"

  # Also publish the latest pm2 config
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/pm2.config.js'
      ArtifactName: 'pm2.config.js'
      publishLocation: 'Container'
    displayName: 'Publish pm2 config'
    

