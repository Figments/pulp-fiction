name: Deploy Test Server (DO)

on:
  workflow_run:
    workflows: ["Build Server (DO)"]
    branches: [ feature/cd-deply-server ]
    types:
      - completed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      SSH_USER: 'dragonfish-cd'      

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Need to use this custom action, because the default GitHub download-artifact doesn't allow sharing of artifacts between workflows
    - name: Download dist.tar.gz
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: digiocean-build-server.yml        
        workflow_conclusion: success
        name: backend_artifact
    
    - name: Upload backend server zip file to the remote server
      env: 
        SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        # Write key out to a file, so we can use it via rsync's 'ssh' invocation        
        echo "$SSH_KEY" >> key.txt
        chmod 400 key.txt
        rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" dist.tar.gz $SSH_USER@${{ secrets.TEST_SERVER_IP }}:/opt/dragonfish/deploy-cache
        rm key.txt

    - name: 'Remote: Extract dist.tar.gz'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: tar -xzvf /opt/dragonfish/deploy-cache/dist.tar.gz --directory /opt/dragonfish/deploy-cache

    - name: 'Remote: Copy files to new release directory'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          mkdir -p /opt/dragonfish/releases/server/release-$GITHUB_RUN_NUMER-$GITHUB_SHA
          # Using rsync here for easier recursive copy & overwriting at destination
          rsync --archive --remove-source-files /opt/dragonfish/deploy-cache/node_modules/ /opt/dragonfish/releases/server/release-$GITHUB_RUN_NUMER-$GITHUB_SHA/node_modules
          rsync --archive --remove-source-files /opt/dragonfish/deploy-cache/dist/packages/server/ /opt/dragonfish/releases/server/release-$GITHUB_RUN_NUMER-$GITHUB_SHA

    - name: 'Remote: Move server symlink to new release'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          ln -sf /opt/dragonfish/current_server /opt/dragonfish/releases/server/release-$GITHUB_RUN_NUMER-$GITHUB_SHA        

    # Todo: Get latest client release, and set up a symlink to it inside /dist/static/whatever
    # Note: there should probably be both a current_server and a current_client. current_client
    # should point to the latest frontend release, and /dist/static/whatever should point to current_client
    - name: 'Remote: Fix up frontend symlinks'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          if find /opt/dragonfish/releases/client -mindepth 1 | read; then
          else
          fi





        